{"/home/travis/build/npmtest/node-npmtest-cordova-plugin-ble-central/test.js":"/* istanbul instrument in package npmtest_cordova_plugin_ble_central */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-ble-central/lib.npmtest_cordova_plugin_ble_central.js":"/* istanbul instrument in package npmtest_cordova_plugin_ble_central */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cordova_plugin_ble_central = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cordova_plugin_ble_central = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-ble-central/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cordova-plugin-ble-central && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cordova_plugin_ble_central */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cordova_plugin_ble_central\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cordova_plugin_ble_central.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_cordova_plugin_ble_central.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cordova_plugin_ble_central.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_cordova_plugin_ble_central.__dirname + '/lib.npmtest_cordova_plugin_ble_central.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-ble-central/node_modules/cordova-plugin-ble-central/www/ble.js":"// (c) 2014-2016 Don Coleman\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/* global cordova, module */\n\"use strict\";\n\nvar stringToArrayBuffer = function(str) {\n    var ret = new Uint8Array(str.length);\n    for (var i = 0; i < str.length; i++) {\n        ret[i] = str.charCodeAt(i);\n    }\n    // TODO would it be better to return Uint8Array?\n    return ret.buffer;\n};\n\nvar base64ToArrayBuffer = function(b64) {\n    return stringToArrayBuffer(atob(b64));\n};\n\nfunction massageMessageNativeToJs(message) {\n    if (message.CDVType == 'ArrayBuffer') {\n        message = base64ToArrayBuffer(message.data);\n    }\n    return message;\n}\n\n// Cordova 3.6 doesn't unwrap ArrayBuffers in nested data structures\n// https://github.com/apache/cordova-js/blob/94291706945c42fd47fa632ed30f5eb811080e95/src/ios/exec.js#L107-L122\nfunction convertToNativeJS(object) {\n    Object.keys(object).forEach(function (key) {\n        var value = object[key];\n        object[key] = massageMessageNativeToJs(value);\n        if (typeof(value) === 'object') {\n            convertToNativeJS(value);\n        }\n    });\n}\n\nmodule.exports = {\n\n    scan: function (services, seconds, success, failure) {\n        var successWrapper = function(peripheral) {\n            convertToNativeJS(peripheral);\n            success(peripheral);\n        };\n        cordova.exec(successWrapper, failure, 'BLE', 'scan', [services, seconds]);\n    },\n\n    startScan: function (services, success, failure) {\n        var successWrapper = function(peripheral) {\n            convertToNativeJS(peripheral);\n            success(peripheral);\n        };\n        cordova.exec(successWrapper, failure, 'BLE', 'startScan', [services]);\n    },\n\n    stopScan: function (success, failure) {\n        cordova.exec(success, failure, 'BLE', 'stopScan', []);\n    },\n\n    startScanWithOptions: function(services, options, success, failure) {\n        var successWrapper = function(peripheral) {\n            convertToNativeJS(peripheral);\n            success(peripheral);\n        };\n        options = options || {};\n        cordova.exec(successWrapper, failure, 'BLE', 'startScanWithOptions', [services, options]);\n    },\n\n    // this will probably be removed\n    list: function (success, failure) {\n        cordova.exec(success, failure, 'BLE', 'list', []);\n    },\n\n    connect: function (device_id, success, failure) {\n        var successWrapper = function(peripheral) {\n            convertToNativeJS(peripheral);\n            success(peripheral);\n        };\n        cordova.exec(successWrapper, failure, 'BLE', 'connect', [device_id]);\n    },\n\n    disconnect: function (device_id, success, failure) {\n        cordova.exec(success, failure, 'BLE', 'disconnect', [device_id]);\n    },\n\n    // characteristic value comes back as ArrayBuffer in the success callback\n    read: function (device_id, service_uuid, characteristic_uuid, success, failure) {\n        cordova.exec(success, failure, 'BLE', 'read', [device_id, service_uuid, characteristic_uuid]);\n    },\n\n    // RSSI value comes back as an integer\n    readRSSI: function(device_id, success, failure) {\n        cordova.exec(success, failure, 'BLE', 'readRSSI', [device_id]);\n    },\n\n    // value must be an ArrayBuffer\n    write: function (device_id, service_uuid, characteristic_uuid, value, success, failure) {\n        cordova.exec(success, failure, 'BLE', 'write', [device_id, service_uuid, characteristic_uuid, value]);\n    },\n\n    // value must be an ArrayBuffer\n    writeWithoutResponse: function (device_id, service_uuid, characteristic_uuid, value, success, failure) {\n        cordova.exec(success, failure, 'BLE', 'writeWithoutResponse', [device_id, service_uuid, characteristic_uuid, value]);\n    },\n\n    // value must be an ArrayBuffer\n    writeCommand: function (device_id, service_uuid, characteristic_uuid, value, success, failure) {\n        console.log(\"WARNING: writeCommand is deprecated, use writeWithoutResponse\");\n        cordova.exec(success, failure, 'BLE', 'writeWithoutResponse', [device_id, service_uuid, characteristic_uuid, value]);\n    },\n\n    // success callback is called on notification\n    notify: function (device_id, service_uuid, characteristic_uuid, success, failure) {\n        console.log(\"WARNING: notify is deprecated, use startNotification\");\n        cordova.exec(success, failure, 'BLE', 'startNotification', [device_id, service_uuid, characteristic_uuid]);\n    },\n\n    // success callback is called on notification\n    startNotification: function (device_id, service_uuid, characteristic_uuid, success, failure) {\n        cordova.exec(success, failure, 'BLE', 'startNotification', [device_id, service_uuid, characteristic_uuid]);\n    },\n\n    // success callback is called when the descriptor 0x2902 is written\n    stopNotification: function (device_id, service_uuid, characteristic_uuid, success, failure) {\n        cordova.exec(success, failure, 'BLE', 'stopNotification', [device_id, service_uuid, characteristic_uuid]);\n    },\n\n    isConnected: function (device_id, success, failure) {\n        cordova.exec(success, failure, 'BLE', 'isConnected', [device_id]);\n    },\n\n    isEnabled: function (success, failure) {\n        cordova.exec(success, failure, 'BLE', 'isEnabled', []);\n    },\n\n    enable: function (success, failure) {\n        cordova.exec(success, failure, \"BLE\", \"enable\", []);\n    },\n\n    showBluetoothSettings: function (success, failure) {\n        cordova.exec(success, failure, \"BLE\", \"showBluetoothSettings\", []);\n    },\n\n    startStateNotifications: function (success, failure) {\n        cordova.exec(success, failure, \"BLE\", \"startStateNotifications\", []);\n    },\n\n    stopStateNotifications: function (success, failure) {\n        cordova.exec(success, failure, \"BLE\", \"stopStateNotifications\", []);\n    }\n\n};\n\nmodule.exports.withPromises = {\n    scan: module.exports.scan,\n    startScan: module.exports.startScan,\n    startScanWithOptions: module.exports.startScanWithOptions,\n    connect: module.exports.connect,\n    startNotification: module.exports.startNotification,\n    startStateNotifications: module.exports.startStateNotifications,\n\n    stopScan: function() {\n        return new Promise(function(resolve, reject) {\n            module.exports.stopScan(resolve, reject);\n        });\n    },\n\n    disconnect: function(device_id) {\n        return new Promise(function(resolve, reject) {\n            module.exports.disconnect(device_id, resolve, reject);\n        });\n    },\n\n    read: function(device_id, service_uuid, characteristic_uuid) {\n        return new Promise(function(resolve, reject) {\n            module.exports.read(device_id, service_uuid, characteristic_uuid, resolve, reject);\n        });\n    },\n\n    write: function(device_id, service_uuid, characteristic_uuid, value) {\n        return new Promise(function(resolve, reject) {\n            module.exports.write(device_id, service_uuid, characteristic_uuid, value, resolve, reject);\n        });\n    },\n\n    writeWithoutResponse: function (device_id, service_uuid, characteristic_uuid, value) {\n        return new Promise(function(resolve, reject) {\n            module.exports.writeWithoutResponse(device_id, service_uuid, characteristic_uuid, value, resolve, reject);\n        });\n    },\n\n    stopNotification: function (device_id, service_uuid, characteristic_uuid) {\n        return new Promise(function(resolve, reject) {\n            module.exports.stopNotification(device_id, service_uuid, characteristic_uuid, resolve, reject);\n        });\n    },\n\n    isConnected: function (device_id) {\n        return new Promise(function(resolve, reject) {\n            module.exports.isConnected(device_id);\n        });\n    },\n\n    isEnabled: function () {\n        return new Promise(function(resolve, reject) {\n            module.exports.isEnabled(resolve, reject);\n        });\n    },\n\n    enable: function () {\n        return new Promise(function(resolve, reject) {\n            module.exports.enable(resolve, reject);\n        });\n    },\n\n    showBluetoothSettings: function () {\n        return new Promise(function(resolve, reject) {\n            module.exports.showBluetoothSettings(resolve, reject);\n        });\n    },\n\n    stopStateNotifications: function () {\n        return new Promise(function(resolve, reject) {\n            module.exports.stopStateNotifications(resolve, reject);\n        });\n    },\n\n    readRSSI: function(device_id) {\n        return new Promise(function(resolve, reject) {\n            module.exports.readRSSI(device_id);\n        });\n    }\n}\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-ble-central/node_modules/cordova-plugin-ble-central/src/browser/BLECentralPlugin.js":"function notSupported() {\n    console.log('BLE is not supported on the browser');\n}\n\nmodule.exports = {\n    scan: function(services, seconds, success, failure) {\n        notSupported();\n        if (failure) failure();\n    },\n    startScan: function(services, success, failure) {\n        notSupported();\n        if (failure) failure();\n    },\n    stopScan: function(success, failure) {\n        notSupported();\n        if (failure) failure();\n    },\n    startScanWithOptions: function(services, options, success, failure) {\n        notSupported();\n        if (failure) failure();\n    },\n    connect: function(device_id, connectSuccess, connectFailure) {\n        notSupported();\n        if (connectFailure) connectFailure();\n    },\n    disconnect: function(device_id, connectSuccess, connectFailure) {\n        notSupported();\n        if (connectFailure) connectFailure();\n    },\n    read: function(device_id, service_uuid, characteristic_uuid, success, failure) {\n        notSupported();\n        if (failure) failure();\n    },\n    readRSSI: function(device_id, success, failure) {\n        notSupported();\n        if (failure) failure();\n    },\n    write: function(device_id, service_uuid, characteristic_uuid, data, success, failure) {\n        notSupported();\n        if (failure) failure();\n    },\n    writeWithoutResponse: function(device_id, service_uuid, characteristic_uuid, data, success, failure) {\n        notSupported();\n        if (failure) failure();\n    },\n    startNotification: function(device_id, service_uuid, characteristic_uuid, success, failure) {\n        notSupported();\n        if (failure) failure();\n    },\n    stopNotifcation: function(device_id, service_uuid, characteristic_uuid, success, failure) {\n        notSupported();\n        if (failure) failure();\n    },\n    isEnabled: function(success, failure) {\n        notSupported();\n        if (failure) failure();\n    },\n    isConnected: function(device_id, success, failure) {\n        notSupported();\n        if (failure) failure();\n    },\n    showBluetoothSettings: function(success, failure) {\n        notSupported();\n        if (failure) failure();\n    },\n    enable: function(success, failure) {\n        notSupported();\n        if (failure) failure();\n    },\n    startStateNotifications: function(success, failure) {\n      notSupported();\n      if (failure) failure();\n    },\n    stopStateNotifications: function(success, failure) {\n      notSupported();\n      if (failure) failure();\n    }\n};\n"}